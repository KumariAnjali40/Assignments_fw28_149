level 1.1==>

1==>query to display all the documents in the collection restaurants. 

ans==>db.res.find().


2===>Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.

ans==>db.res.find({},{restaurant_id:1, name:1,borough:1,cuisine:1})

or=>db.res.aggregate([{$project:{restaurant_id:1,name:1,borough:1,cuisine:1}}])

3===>Display the fields restaurant_id, name, borough, and cuisine, excluding the field _id for all documents in the collection restaurants:

ans==>db.restaurants.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 })
 or==>db.restaurants.aggregate([
  { $project: { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 } }
])



4===>Display all restaurants in the borough Bronx:
ans==> db.res.find({"borough":"Bronx"})
or==>db.res.aggregate([{$match:{"borough":"Bronx"}}])



5===>Display the first 5 restaurants in the borough Bronx:
ans==>db.res.find({"borough":"Bronx"}).limit(5)
or==> db.res.aggregate([{$match:{"borough":"Bronx"}},{$limit:5}])



6===>Display the next 5 restaurants (after skipping the first 5) in the borough Bronx:
ans==> db.res.find({"borough":"Bronx"}).skip(5).limit(5)
or===>db.res.aggregate([{$match:{"borough":"Bronx"}},{$skip:5},{$limit:5}])



7===>Find restaurants that achieved a score more than 90:
ans===>db.res.find({"grades.score":{$gt:90}})
db.res.aggregate([{$unwind:"$grades"},{$match:{"grades.score":{$gt:90}}}])



8===>Find restaurants that achieved a score between 80 and 100:
ans==>db.res.aggregate([{$unwind:"$grades"},{$match:{"grades.score":{$gt:80,$lt:100}}}])



9===>Find restaurants located in latitude less than -95.754168:
ans==>db.res.aggregate([{$match:{"address.coord.1":{$lt:-95.754168}}}])


10==>Find restaurants that do not prepare 'American' cuisine, have a grade score more than 70, and latitude less than -65.754168:
ans==>db.res.aggregate([{$match:{$and:[{cuisine:{$ne:"America"}},{"grades.scores":{$gt:70}},{"address.coord.0":{$lt:-65.454168}}]}}])



11==>Find restaurants that do not prepare 'American' cuisine, achieved a score more than 70, and located in longitude less than -65.754168 without using $and:
ans==>db.res.aggregate([{$match:{cuisine:{$ne:"American"},"grades.score":{$gt:70},"address.coord.0":{$lt:-65.754168}}}])



12===>Find restaurant ID, name, borough, and cuisine for restaurants with names starting with 'Wil':
ans==>db.res.aggregate([{$match:{name:/^wil/}},{$project:{ restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}}])
===> db.restaurants.find({ name: /^Wil/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })




13===>Find restaurant ID, name, borough, and cuisine for restaurants with names ending with 'ces'

ans===>db.res.find({name:/ces$/},{restaurant_id:1,name:1,borough:1,cuisine:1})
===> db.res.aggregate([{$match:{name:/ces$/}},{$project:{restaurant_id:1,name:1,borough:1,cuisine:1,_id:0}}])


14===>Find restaurant ID, name, borough, and cuisine for restaurants with names containing 'Reg' anywhere:
ans===>db.res.find({name:/Reg/},{restaurant_id:1,name:1,borough:1,cuisine:1})


15===>Arrange the name of restaurants in ascending order along with all columns:
ans===>db.res.find({}).sort({name:1})


16===>Arrange the name of cuisine in ascending order, and for that same cuisine, arrange borough in descending order:
ans==> db.res.find({}).sort({cuisine:1,borough:-1})
or==> db.res.aggregate([{$sort:{cuisine:1,borough:-1}}])